public class Solution {

//Visitng nodes in preorder fashion
// bottom up approach

        public List<List<Integer>> findLeaves(TreeNode root) {
            List<List<Integer>> list = new ArrayList<>();
            findLeavesHelper(list, root);
            return list;
        }
        
  // return the level of root
        private int findLeavesHelper(List<List<Integer>> list, TreeNode root) {
            if (root == null) {
                return -1;
            }
            System.out.println(root.val);
                 
            int leftLevel = findLeavesHelper(list, root.left);
            int rightLevel = findLeavesHelper(list, root.right);
               
            int level = Math.max(leftLevel, rightLevel) + 1;
        
               System.out.println(leftLevel+" "+rightLevel);
            if (list.size() == level) {
                list.add(new ArrayList<>());
            }
            //  System.out.println(root.val);
            list.get(level).add(root.val);
           // root.left = root.right = null; // do i need to set the nodes to null after visitng them?
            return level;
        }
    }
    
    i/p:[1,2,3,4,5]
    o/p: [[4,5,3],[2],[1]]
    
    working:
1
2
4
-1 -1
5
-1 -1
0 0
3
-1 -1
1 0
