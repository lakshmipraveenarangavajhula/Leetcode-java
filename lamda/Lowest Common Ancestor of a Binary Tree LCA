/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        if (root == null || root == p || root == q)  return root;
    TreeNode left = lowestCommonAncestor(root.left, p, q);
    TreeNode right = lowestCommonAncestor(root.right, p, q);
    return left == null ? right : right == null ? left : root;
        
    }
}

       _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4

check if 3 is the same as 5,4? if not go down check for 5. if yes for 5,5 returns 5 upwards.
6 returns null
2 null
7 null
4 4
1 null
0 null
8 null
5 has 5 & 4 hence 5 is the LCA because none of the values were null.

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself
             according to the LCA definition.
 
 
 Time - O(N)
 This is a good solution but un-necessarily does the extra work of checking the whole tree if 
 we have already found the ancestor in the left subtree.
