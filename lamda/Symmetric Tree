/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 A tree is symmetric if the left subtree is a mirror reflection of the right subtree.

Two trees are a mirror reflection of each other if:

1.Their two roots have the same value.
2.The right subtree of each tree is a mirror reflection of the left subtree of the other tree.

class Solution {
    public boolean isSymmetric(TreeNode root) {
        
        return root==null || helper(root.left,root.right);
    }
    
    public boolean helper(TreeNode left,TreeNode right)
    {
        if(left==null || right==null)
            return left==right;
        if(left.val!=right.val)
            return false;
        return helper(left.left,right.right) && helper(left.right,right.left);     
    
    }
    
}


public boolean isSymmetric(TreeNode root) {
    Queue<TreeNode> q = new LinkedList<>();
    q.add(root);
    q.add(root);
    while (!q.isEmpty()) {
        TreeNode t1 = q.poll();
        TreeNode t2 = q.poll();
        if (t1 == null && t2 == null) continue;
        if (t1 == null || t2 == null) return false;
        if (t1.val != t2.val) return false;
        q.add(t1.left);
        q.add(t2.right);
        q.add(t1.right);
        q.add(t2.left);
    }
    return true;
}

Time & Space O(N) for both

