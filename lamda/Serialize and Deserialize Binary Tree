public class Sol {
  public String serialize(TreeNode root) {
        return serializeHelper(root,"");
    }
    
    private String serializeHelper(TreeNode root, String str){
          if (root == null)
          {
                str += "null,";
          } 
            else 
            {
            str += str.valueOf(root.val) + ",";
            str = serializeHelper(root.left, str);
             str = serializeHelper(root.right, str);
        }
    return str;
        
        
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String s) {
        String[] data = s.split(",");
        for(String s1:data)
        {
            System.out.println(s1);
        }
        
        List<String> list = new LinkedList<>(Arrays.asList(data));
        //System.out.println(list);
        return desHelper(list);
    }
    
    private TreeNode desHelper(List<String> l)
    {
            if (l.get(0).equals("null")) {
            l.remove(0);
            return null;
    }

    TreeNode root = new TreeNode(Integer.valueOf(l.get(0)));
    l.remove(0);
    root.left = desHelper(l);
    root.right = desHelper(l);

    return root;
    }
}

Time complexity : in both serialization and deserialization functions, we visit each node exactly once, 
thus the time complexity is O(N), where N is the number of nodes, i.e. the size of tree.

Space complexity : in both serialization and deserialization functions, 
we keep the entire tree, either at the beginning or at the end, therefore, the space complexity is O(N).
