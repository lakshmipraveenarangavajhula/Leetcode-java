class Solution {
public int depthSum(List<NestedInteger> nestedList) {
    return depthSum(nestedList, 1);
}

public int depthSum(List<NestedInteger> list, int depth) {
    int sum = 0;
    for (NestedInteger e : list) {
        if (e.isInteger()) {
            sum += e.getInteger() * depth;
            System.out.println("1 "+sum);
        } else {
            sum += depthSum(e.getList(), depth + 1);
            System.out.println("2 "+sum);
        }
    }
    return sum;
}

}


ip: [ [1,1] , 2 , [1,1] ]
op: 4 1s at depth 2 + 1 2 at depth 1 = 10


1 2
1 4
2 4
1 6
1 2
1 4
2 10


O(N) time N is the total number of nested elements in the input list.
O(D) Space D is stack of nested depth for this ip its 2
[1,[4,[6]]] --> 3

 space, at most O(D)O(D) recursive calls are placed on the stack, where DD is the maximum level of nesting in the input.
