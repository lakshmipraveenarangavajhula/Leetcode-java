public static int getLength(String str) {
    int depth = -1;
    while (!str.equals("0")) {
        String newStr = str.replace("(00)", "0");
        if (newStr.equals(str)) {
            return -1;
        }
        str = newStr;
        ++depth;
    }
    return depth;
}


We can substitute all occurence "(00)" to "0" in the string, this decrease the tree height by one. We repeatedly do this unitl no change during two iteration.
If the final result is "0", then it is a valid tree, otherwise, invalid.
Complexity
Time: O(n * depth)
Space: O(n)

  find_depth('(00)') -> 0 
  find_depth('((00)0)') -> 1 
  find_depth('((00)(00))') -> 1 //2?
  find_depth('((00)(0(00)))') -> 2 
  find_depth('((00)(0(0(00))))') -> 3 
  find_depth('x') -> -1 
  find_depth('0') -> -1 
  find_depth('()') -> -1 
  find_depth('(0)') -> -1 
  find_depth('(00)x') -> -1 
  find_depth('(0p)') -> -1
