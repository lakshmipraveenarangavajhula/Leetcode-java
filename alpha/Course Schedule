class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (prerequisites == null || prerequisites.length == 0 || numCourses == 0 ) return true;
      
        List<List<Integer>> adj = new ArrayList<>();
        
            // Convert graph presentation from edges to indegree of adjacent list.

        int[] indegree = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }

         for(int[] e : prerequisites)
        {
            adj.get(e[0]).add(e[1]);
            indegree[e[1]]++; // Indegree - how many prerequisites are needed.
        }
        
        // System.out.println(adj);
      
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
                        // System.out.println(indegree[i]);

            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        int cnt = 0;
        while (!q.isEmpty()) {
            int cur = q.poll(); // Already finished this prerequisite course.
            cnt++;
            for (int next : adj.get(cur)) {
                if (--indegree[next] == 0) {
                    q.offer(next);
                }
            }
        }
        return cnt == numCourses;     // How many courses don't need prerequisites.
    }
}
