/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
public List<Interval> merge(List<Interval> intervals) {
    if (intervals.size() <= 1)
        return intervals;
    
    // Sort by ascending starting point using an anonymous Comparator
    intervals.sort((i1, i2) -> Integer.compare(i1.start, i2.start));
    
    List<Interval> result = new ArrayList<Interval>();
    int start = intervals.get(0).start;
    int end = intervals.get(0).end;
    //System.out.println(start+" "+end);
    
    
    for (Interval interval : intervals) {
        System.out.println("interval.start:"+interval.start);
        System.out.println("end:"+end);
        if (interval.start <= end) // Overlapping intervals, move the end if needed
        { 
            end = Math.max(end, interval.end);
        }
        else 
        {                     // Disjoint intervals, add the previous one and reset bounds
            System.out.println("start:"+start+" "+"end is:"+end);
            result.add(new Interval(start, end));
            start = interval.start;
            end = interval.end;
            System.out.println("start:"+start+" "+"end is:"+end+"last");
            
        }
    }
    //When you exit the start points to the first element of the last interval
    // Add the last interval
    result.add(new Interval(start, end));
    return result;
}
}

// time - O(n log(n) 
Sroting takes O(n log(n)) and merging the intervals takes O(n).

Input: [[1,5],[2,7],[9,11],[12,117]]
Output: [[1,6],[9,11],[12,17]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
