/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {

private List<Integer> flattenedList;
private Iterator<Integer> it;

public NestedIterator(List<NestedInteger> nestedList) {
    flattenedList = new LinkedList<Integer>();
    flatten(nestedList);
    it = flattenedList.iterator();
}

private void flatten(List<NestedInteger> nestedList) {
    for (NestedInteger i : nestedList) {
        if (i.isInteger()) {
            flattenedList.add(i.getInteger());
        } else {
            flatten(i.getList());
        }
    }
}

@Override
public Integer next() {
    return it.next();
}

@Override
public boolean hasNext() {
    return it.hasNext();
}
    
}
/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
 
 
Time - O(m+n) 
m = number of nested lists 
n = number of elements across all lists (as we have to iterate through them)
It would be O(1) for next and hasNext since we flattened the list.
