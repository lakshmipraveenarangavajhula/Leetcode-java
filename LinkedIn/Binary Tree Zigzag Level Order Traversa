/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {

    public static List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        System.out.println("node"+" "+"list size"+" "+"level"+" "+"list");
        compute(root, list, 0);
        return list;
    }

    private static void compute(TreeNode curr, List<List<Integer>> list, int level) {
        if (curr == null) return;

        if (level >= list.size()) 
            list.add(new ArrayList<Integer>());
        

        if (level % 2 == 0) 
            list.get(level).add(curr.val);
        else 
            list.get(level).add(0, curr.val);
        
        System.out.println(curr.val+"\t "+list.size()+"\t "+level+"\t "+list);
        compute(curr.left, list, level + 1);
        compute(curr.right, list, level + 1);
    }
}
ip: [1,2,3,4,5,6,7]
  1
  /\
  2 3
 /\ /\
4 5 6 7
op:
node list size level list
1	 1	 0	 [[1]]
2	 2	 1	 [[1], [2]]
4	 3	 2	 [[1], [2], [4]]
5	 3	 2	 [[1], [2], [4, 5]]
3	 3	 1	 [[1], [3, 2], [4, 5]]
6	 3	 2	 [[1], [3, 2], [4, 5, 6]]
7	 3	 2	 [[1], [3, 2], [4, 5, 6, 7]]
Time O(N)
space is MAYBE O(H)
